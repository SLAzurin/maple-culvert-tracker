//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Characters = newCharactersTable("public", "characters", "")

type charactersTable struct {
	postgres.Table

	// Columns
	ID                 postgres.ColumnInteger
	MapleCharacterName postgres.ColumnString
	DiscordUserID      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CharactersTable struct {
	charactersTable

	EXCLUDED charactersTable
}

// AS creates new CharactersTable with assigned alias
func (a CharactersTable) AS(alias string) *CharactersTable {
	return newCharactersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharactersTable with assigned schema name
func (a CharactersTable) FromSchema(schemaName string) *CharactersTable {
	return newCharactersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharactersTable with assigned table prefix
func (a CharactersTable) WithPrefix(prefix string) *CharactersTable {
	return newCharactersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharactersTable with assigned table suffix
func (a CharactersTable) WithSuffix(suffix string) *CharactersTable {
	return newCharactersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharactersTable(schemaName, tableName, alias string) *CharactersTable {
	return &CharactersTable{
		charactersTable: newCharactersTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newCharactersTableImpl("", "excluded", ""),
	}
}

func newCharactersTableImpl(schemaName, tableName, alias string) charactersTable {
	var (
		IDColumn                 = postgres.IntegerColumn("id")
		MapleCharacterNameColumn = postgres.StringColumn("maple_character_name")
		DiscordUserIDColumn      = postgres.StringColumn("discord_user_id")
		allColumns               = postgres.ColumnList{IDColumn, MapleCharacterNameColumn, DiscordUserIDColumn}
		mutableColumns           = postgres.ColumnList{MapleCharacterNameColumn, DiscordUserIDColumn}
	)

	return charactersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		MapleCharacterName: MapleCharacterNameColumn,
		DiscordUserID:      DiscordUserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
